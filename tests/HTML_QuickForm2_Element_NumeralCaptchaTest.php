<?php
require_once 'PHPUnit/Framework.php';

require_once '/home/cweiske/Dev/cvs/pear/sandbox/HTML_QuickForm2_Captcha/HTML/QuickForm2/Element/NumeralCaptcha.php';

/**
 * Test class for HTML_QuickForm2_Element_NumeralCaptcha.
 * Generated by PHPUnit on 2010-07-23 at 10:08:26.
 */
class HTML_QuickForm2_Element_NumeralCaptchaTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var HTML_QuickForm2_Element_NumeralCaptcha
     */
    protected $nc;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        //start session if not done yet
        if (session_id() == '') {
            session_start();
        }

        $this->nc = new HTML_QuickForm2_Element_NumeralCaptcha();
    }

    /**
     * Test getNumeral()
     */
    public function testGetNumeral()
    {
        $num = $this->nc->getNumeral();
        $this->assertType(
            'Text_CAPTCHA_Numeral', $num
        );

        //check if the same object is returned every time
        $this->assertEquals($num, $this->nc->getNumeral());
    }

    /**
     * Test setNumeral() by setting it to a new value, retrieving
     * it again and verifying that the retrieved and the set ones
     * are the same.
     */
    public function testSetNumeral()
    {
        $num = $this->nc->getNumeral();

        $cap = new Text_CAPTCHA_Numeral();
        $this->assertNotEquals($cap, $num);
        $this->nc->setNumeral($cap);

        $num2 = $this->nc->getNumeral();
        $this->assertEquals($cap, $num2);
    }

    /**
     * Check the generated HTML for well-formedness.
     */
    public function testGetCaptchaHtml()
    {
        //we cannot test getCaptchaHtml() alone because
        // verifyCaptcha() is not called there.
        // Using __toString() is the only way.
        (string)$this->nc;
        $str = (string)$this->nc->getCaptchaHtml();
        $xml = '<?xml version="1.0" encoding="utf-8"?>'
            . "\n<test>\n"
            . $str
            . "\n</test>";

        //this is a cheap way to see if the xml is well-formed
        $this->assertTag(array('test'), $xml, '', false);
    }

    /**
     * Tests if __toString() renders the captcha question
     * and input element in the normal case (form not filled yet)
     */
    public function test__toStringNormal()
    {
    }
}
?>
